Index: src/main/ui/ConsoleApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport model.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n// Console UI for timing editor\r\n// uses TellerApp as a template\r\npublic class ConsoleApp {\r\n\r\n    private Song song;\r\n    private Scanner input;\r\n    String command;\r\n\r\n    public ConsoleApp() {\r\n        runEditor();\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES:\r\n    // EFFECTS: processes user input\r\n    private void runEditor() {\r\n        input = new Scanner(System.in);\r\n        boolean keepGoing = true;\r\n\r\n        System.out.println(\"Welcome!\");\r\n        initialize();\r\n        while (keepGoing) {\r\n            displayMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"/q\")) {\r\n                keepGoing = false;\r\n            } else {\r\n                processCommand(command);\r\n            }\r\n        }\r\n\r\n        System.out.println(\"\\nSee you next time\");\r\n\r\n    }\r\n\r\n    // MODIFIES:\r\n    // REQUIRES:\r\n    // EFFECTS: prints menu screen and commands\r\n    private void displayMenu() {\r\n        System.out.println(\"\\nCurrent song: \" + song.getTitle() + \" - \" + song.getArtist());\r\n        System.out.println(\"Commands:\");\r\n        System.out.println(\"\\t /t -> title\");\r\n        System.out.println(\"\\t /a -> artist\");\r\n        System.out.println(\"\\t /add -> add timing section\");\r\n        System.out.println(\"\\t /remove -> remove timing section\");\r\n        System.out.println(\"\\t /ts -> view timing sections\");\r\n        System.out.println(\"\\t /bpm -> get BPM at certain time\");\r\n        System.out.println(\"\\t /q -> quit\");\r\n\r\n\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES: this\r\n    // EFFECTS: prompt user for title and artist, create Song with those parameters\r\n    private void initialize() {\r\n        System.out.println(\"Please enter a song title.\");\r\n        String title = input.nextLine();\r\n        System.out.println(\"Please enter an artist.\");\r\n        String artist = input.nextLine();\r\n        System.out.println(\"Song title: \" + title);\r\n        System.out.println(\"Song artist: \" + artist);\r\n        System.out.println(\"Confirm? y / n\");\r\n        String confirm = input.nextLine().toLowerCase();\r\n        if (confirm.equals(\"n\")) {\r\n            initialize();\r\n        }\r\n        song = new Song(title, artist);\r\n    }\r\n\r\n    // REQUIRES: command != null\r\n    // MODIFIES:\r\n    // EFFECTS: performs function corresponding to command\r\n    private void processCommand(String c) {\r\n        switch (c) {\r\n            case \"/t\":\r\n                titleCommand();\r\n                break;\r\n            case \"/a\":\r\n                artistCommand();\r\n                break;\r\n            case \"/add\":\r\n                addSection();\r\n                break;\r\n            case \"/remove\":\r\n                removeSection();\r\n                break;\r\n            case \"/ts\":\r\n                viewSections();\r\n                break;\r\n            case \"/bpm\":\r\n                findBPM();\r\n                break;\r\n            case \"/sig\":\r\n                findTimeSig();\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid command\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES: this\r\n    // EFFECTS: changes title name if user wants to\r\n    private void titleCommand() {\r\n        System.out.println(\"Current title: \" + song.getTitle());\r\n        System.out.println(\"Enter new title or /q to cancel\");\r\n        String title = input.next();\r\n        if (!title.equals(\"/q\")) {\r\n            song.setTitle(title);\r\n        }\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES: this\r\n    // EFFECTS: changes artist name if user wants to\r\n    private void artistCommand() {\r\n        System.out.println(\"Current artist: \" + song.getArtist());\r\n        System.out.println(\"Enter new artist or /q to cancel\");\r\n        String artist = input.next();\r\n        if (!artist.equals(\"/q\")) {\r\n            song.setArtist(artist);\r\n        }\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES: this\r\n    // EFFECTS: add timing section from user input\r\n    private void addSection() {\r\n        System.out.println(\"\\nEnter timestamp of new timing section (ms)\");\r\n        int timestamp = Integer.parseInt(input.next());\r\n        System.out.println(\"Enter bpm\");\r\n        Double bpm = Double.parseDouble(input.next());\r\n        System.out.println(\"Enter time signature numerator\");\r\n        int top = input.nextInt();\r\n        System.out.println(\"Enter time signature denominator\");\r\n        int bot = input.nextInt();\r\n        song.addSection(new TimingSection(timestamp, bpm, new TimeSignature(top,bot)));\r\n\r\n        song.sort();\r\n        System.out.print(\"Timing section added!\");\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES: this\r\n    // EFFECTS: remove selected timing section\r\n    private void removeSection() {\r\n        System.out.println(\"Enter time where section is active to remove\");\r\n        int time = input.nextInt();\r\n        song.removeSection(song.find(time));\r\n        System.out.print(\"Timing section removed :(\");\r\n    }\r\n\r\n    // REQUIRES:\r\n    // MODIFIES:\r\n    // EFFECTS: prints each timing section\r\n    private void viewSections() {\r\n        ArrayList<TimingSection> timingSections = song.getTimingSections();\r\n        for (TimingSection ts : timingSections) {\r\n            String sig = ts.getTimesig().getTop() + \"/\" + ts.getTimesig().getBot();\r\n            System.out.println(\"Timestamp: \" + ts.getTime() + \"  BPM: \" + ts.getBPM() + \"  Time signature: \" + sig);\r\n        }\r\n    }\r\n\r\n    // REQUIRES: at least one timing section with timestamp < time\r\n    // MODIFIES:\r\n    // EFFECTS: prints bpm active at user specified time\r\n    private void findBPM() {\r\n        System.out.println(\"Enter time to find BPM for\");\r\n        double time = input.nextDouble();\r\n        TimingSection ts = song.find(time);\r\n        System.out.println(\"BPM at \" + time + \": \" + ts.getBPM());\r\n    }\r\n\r\n    // REQUIRES: at least one timing section with timestamp < time\r\n    // EFFECTS: prints time signature active at user specified time\r\n    private void findTimeSig() {\r\n        System.out.println(\"Enter time to find time signature for\");\r\n        double time = input.nextDouble();\r\n        TimeSignature ts = song.findSig(time);\r\n        System.out.println(\"Time Signature at \" + time + \": \" + ts.getTop() + \" / \" + ts.getBot());\r\n    }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/ConsoleApp.java b/src/main/ui/ConsoleApp.java
--- a/src/main/ui/ConsoleApp.java	
+++ b/src/main/ui/ConsoleApp.java	
@@ -80,7 +80,8 @@
     // REQUIRES: command != null
     // MODIFIES:
     // EFFECTS: performs function corresponding to command
-    private void processCommand(String c) {
+
+    void processCommand(String c) {
         switch (c) {
             case "/t":
                 titleCommand();
@@ -190,5 +191,5 @@
         TimeSignature ts = song.findSig(time);
         System.out.println("Time Signature at " + time + ": " + ts.getTop() + " / " + ts.getBot());
     }
-    }
+
 }
